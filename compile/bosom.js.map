{
"version":3,
"file":"compile/bosom.js",
"lineCount":23,
"mappings":"A;;;;AACO,MAAM,CAKX,SAAAA,CALW,CAAA,GA+BTC,IA/BG;ACAA,MAAM,CAkBX,kBAAAC,CAlBW,EAkDX,SAAAC,CAlDW,CAAA,GAgFTC,EAhFG;ACEP,MAAMC,IAAML,CAAA,CAAS,OAAT,CAAZ,EAEMM,IAAKA,KAAOC,EAAPD,IACGE,MAAM,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,CAAA,IAAU;AACtCR,GAAA,CAASI,CAAT,EAAe,CAACK,CAAD,EAAKC,CAAL,CAAA,IACTD,CAAJ,GAAeD,CAAA,CAAEC,CAAF,CAAf,GACOF,CAAA,CAAE,GAAGG,CAAH,EAAF,CAFT,CAAA;AADsC,CAAtB,CAHpB,EAYMC,IAAYA,KAAM,CAACP,CAAD,EAAOM,CAAP,EAAaE,CAAb,CAAND,IAA8B;AAC9C,QAAM,CACJ,EAAAE,CAAA,GAAW,IADP,EAEJ,EAAAC,CAAA,GAAQ,IAFJ,CAAA,GAGFF,CAHJ,EAIMG,IAAK,MAAMhB,CAAA,CAAkBK,CAAlB,CAJjB,EAKMY,IAAOC,IAAAC,UAAA,CAAeR,CAAf,EAAqBG,CAArB,EAA+BC,CAA/B,CALb;AAMA,QAAM,IAAIR,OAAJ,CAAaC,CAAD,IAAO;AACvBQ,KAAAI,IAAA,CAAOH,CAAP,EAAaT,CAAb,CAAA;AADuB,GAAnB,CAAN;AAP8C,CAZhD;ACDAa,MAAAC,QAAA,GDuCcC,KAAM,CAAClB,CAAD,EAAOM,CAAP,EAAaE,CAAA,GAAS,EAAtB,CAANU,IAAmC;AAC/C,MAAIZ,CAAJ;AAEE,WADYC,CAAAY,CAAUnB,CAAVmB,EAAgBb,CAAhBa,EAAsBX,CAAtBW,CACZ;AAFF;AAIArB,GAAA,CAAI,YAAJ,EAAkBE,CAAlB,CAAA;AACMG,GAAAA,GAAI,MAAMJ,CAAA,CAAGC,CAAH,CAAVG;AAEN,SADYU,IAAAO,MAAAD,CAAWhB,CAAXgB,CACZ;AAR+C,CCvCjD;;",
"sources":["node_modules/util/index.js","node_modules/fs/index.js","src/index.js","src/depack.js"],
"sourcesContent":["export default util\nexport const {\n  TextDecoder,\n  TextEncoder,\n  callbackify,\n  debug,\n  debuglog,\n  deprecate,\n  error,\n  format,\n  getSystemErrorName,\n  inherits,\n  inspect,\n  isArray,\n  isBoolean,\n  isBuffer,\n  isDate,\n  isError,\n  isFunction,\n  isNull,\n  isNullOrUndefined,\n  isNumber,\n  isObject,\n  isPrimitive,\n  isRegExp,\n  isString,\n  isSymbol,\n  isUndefined,\n  log,\n  print,\n  promisify,\n  puts,\n} = util","export default fs\nexport const {\n  ReadStream,\n  Stats,\n  WriteStream,\n  access,\n  accessSync,\n  appendFile,\n  appendFileSync,\n  chmod,\n  chmodSync,\n  chown,\n  chownSync,\n  close,\n  closeSync,\n  constants,\n  copyFile,\n  copyFileSync,\n  createReadStream,\n  createWriteStream,\n  exists,\n  existsSync,\n  fchmod,\n  fchmodSync,\n  fchown,\n  fchownSync,\n  fdatasync,\n  fdatasyncSync,\n  fstat,\n  fstatSync,\n  fsync,\n  fsyncSync,\n  ftruncate,\n  ftruncateSync,\n  futimes,\n  futimesSync,\n  lchmod,\n  lchmodSync,\n  lchown,\n  lchownSync,\n  link,\n  linkSync,\n  lstat,\n  lstatSync,\n  mkdir,\n  mkdirSync,\n  mkdtemp,\n  mkdtempSync,\n  open,\n  openSync,\n  read,\n  readFile,\n  readFileSync,\n  readSync,\n  readdir,\n  readdirSync,\n  readlink,\n  readlinkSync,\n  realpath,\n  realpathSync,\n  rename,\n  renameSync,\n  rmdir,\n  rmdirSync,\n  stat,\n  statSync,\n  symlink,\n  symlinkSync,\n  truncate,\n  truncateSync,\n  unlink,\n  unlinkSync,\n  unwatchFile,\n  utimes,\n  utimesSync,\n  watch,\n  watchFile,\n  write,\n  writeFile,\n  writeFileSync,\n  writeSync,\n} = fs","import { debuglog } from 'util'\nimport { readFile, createWriteStream } from 'fs'\n\nconst LOG = debuglog('bosom')\n\nconst re = async (path) => {\n  const ret = await new Promise((r, j) => {\n    readFile(path, (er, data) => {\n      if (er) return j(er)\n      return r(`${data}`)\n    })\n  })\n  return ret\n}\n\nconst writeJSON = async (path, data, config) => {\n  const {\n    replacer = null,\n    space = null,\n  } = config\n  const ws = await createWriteStream(path)\n  const json = JSON.stringify(data, replacer, space)\n  await new Promise((r) => {\n    ws.end(json, r)\n  })\n}\n\n/**\n * @typedef {Object} Config\n * @property {number} [space=0] How many spaces to use to indent JSON when writing (default no indent).\n * @property {string} [mode=spread] The write mode, only spread at the moment which will make the new data be merged on top of the old one.\n */\n\n/**\n * Read or write a JSON file.\n * @param {string} path Path to the file to read.\n * @param {object} data Data to write to the file (if JSON file exists, fields in it will be overridden).\n * @param {Config} config how to write data.\n * @param {number} [config.space=0] How many spaces to use to indent JSON when writing (default no indent).\n * @param {string} [config.mode=spread] The write mode, only spread at the moment which will make the new data be merged on top of the old one.\n */\nconst bosom = async (path, data, config = {}) => {\n  if (data) {\n    const res = writeJSON(path, data, config)\n    return res\n  }\n  LOG('Reading %s', path)\n  const r = await re(path)\n  const res = JSON.parse(r)\n  return res\n}\n\nexport default bosom\n","import bosom from './'\n\nmodule.exports = bosom"],
"names":["debuglog","util","createWriteStream","readFile","fs","LOG","re","path","ret","Promise","r","j","er","data","writeJSON","config","replacer","space","ws","json","JSON","stringify","end","module","exports","bosom","res","parse"]
}
