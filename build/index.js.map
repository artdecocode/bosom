{"version":3,"sources":["../src/index.js"],"names":["LOG","re","path","ret","Promise","r","j","er","data","writeJSON","config","replacer","space","ws","json","JSON","stringify","end","fileJson","res","parse"],"mappings":";;;;;;;AAAA;;AACA;;AAEA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;;AAEA,MAAMC,KAAK,MAAOC,IAAP,IAAgB;AACzB,QAAMC,MAAM,MAAM,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtC,sBAASJ,IAAT,EAAe,CAACK,EAAD,EAAKC,IAAL,KAAc;AAC3B,UAAID,EAAJ,EAAQ,OAAOD,EAAEC,EAAF,CAAP;AACR,aAAOF,EAAG,GAAEG,IAAK,EAAV,CAAP;AACD,KAHD;AAID,GALiB,CAAlB;AAMA,SAAOL,GAAP;AACD,CARD;;AAUA,MAAMM,YAAY,OAAOP,IAAP,EAAaM,IAAb,EAAmBE,MAAnB,KAA8B;AAC9C,QAAM;AACJC,eAAW,IADP;AAEJC,YAAQ;AAFJ,MAGFF,MAHJ;AAIA,QAAMG,KAAK,MAAM,2BAAkBX,IAAlB,CAAjB;AACA,QAAMY,OAAOC,KAAKC,SAAL,CAAeR,IAAf,EAAqBG,QAArB,EAA+BC,KAA/B,CAAb;AACA,QAAM,IAAIR,OAAJ,CAAaC,CAAD,IAAO;AACvBQ,OAAGI,GAAH,CAAOH,IAAP,EAAaT,CAAb;AACD,GAFK,CAAN;AAGD,CAVD;AAYA;;;;;;AAMA;;;;;;;;;;AAQA,MAAMa,WAAW,OAAOhB,IAAP,EAAaM,IAAb,EAAmBE,SAAS,EAA5B,KAAmC;AAClD,MAAIF,IAAJ,EAAU;AACR,UAAMW,MAAMV,UAAUP,IAAV,EAAgBM,IAAhB,EAAsBE,MAAtB,CAAZ;AACA,WAAOS,GAAP;AACD;;AACDnB,MAAI,YAAJ,EAAkBE,IAAlB;AACA,QAAMG,IAAI,MAAMJ,GAAGC,IAAH,CAAhB;AACA,QAAMiB,MAAMJ,KAAKK,KAAL,CAAWf,CAAX,CAAZ;AACA,SAAOc,GAAP;AACD,CATD;;eAWeD,Q","sourcesContent":["import { debuglog } from 'util'\nimport { readFile, createWriteStream } from 'fs'\n\nconst LOG = debuglog('file-json')\n\nconst re = async (path) => {\n  const ret = await new Promise((r, j) => {\n    readFile(path, (er, data) => {\n      if (er) return j(er)\n      return r(`${data}`)\n    })\n  })\n  return ret\n}\n\nconst writeJSON = async (path, data, config) => {\n  const {\n    replacer = null,\n    space = null,\n  } = config\n  const ws = await createWriteStream(path)\n  const json = JSON.stringify(data, replacer, space)\n  await new Promise((r) => {\n    ws.end(json, r)\n  })\n}\n\n/**\n * @typedef {Object} Config\n * @property {number} [space=0] How many spaces to use to indent JSON when writing (default no indent).\n * @property {string} [mode=spread] The write mode, only spread at the moment which will make the new data be merged on top of the old one.\n */\n\n/**\n * Read or write a JSON file.\n * @param {string} path Path to the file to read.\n * @param {object} data Data to write to the file (if JSON file exists, fields in it will be overridden).\n * @param {Config} config how to write data.\n * @param {number} [config.space=0] How many spaces to use to indent JSON when writing (default no indent).\n * @param {string} [config.mode=spread] The write mode, only spread at the moment which will make the new data be merged on top of the old one.\n */\nconst fileJson = async (path, data, config = {}) => {\n  if (data) {\n    const res = writeJSON(path, data, config)\n    return res\n  }\n  LOG('Reading %s', path)\n  const r = await re(path)\n  const res = JSON.parse(r)\n  return res\n}\n\nexport default fileJson\n"],"file":"index.js"}